# Production-ready Dockerfile with ALL dependencies pre-installed
# This creates a heavy but complete image for Railway deployment

FROM python:3.11-slim as base

# Install system dependencies (all at once for better caching)
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    libpq5 \
    git \
    curl \
    wget \
    build-essential \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set working directory
WORKDIR /app

# Copy requirements first for better Docker layer caching
COPY requirements.txt requirements-prod.txt ./

# Install Python dependencies with caching
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# Pre-install and cache ML models
RUN python -c "
import torch
print(f'PyTorch {torch.__version__} installed')

import transformers
print(f'Transformers {transformers.__version__} installed')

from transformers import AutoTokenizer, AutoModel
print('Downloading PhoBERT models...')

try:
tokenizer = AutoTokenizer.from_pretrained('vinai/phobert-base')
model = AutoModel.from_pretrained('vinai/phobert-base')
print('✅ PhoBERT models cached successfully')

# Quick test
inputs = tokenizer('Xin chào Việt Nam', return_tensors='pt')
with torch.no_grad():
outputs = model(**inputs)
print('✅ Model test successful')

except Exception as e:
print(f'⚠️ Model caching failed: {e}')
print('Models will be downloaded at runtime')
"

# Copy application source code
COPY src/ ./src/
COPY *.py ./
COPY *.md ./
COPY *.json ./
COPY Procfile ./

# Pre-compile Python bytecode for faster startup
RUN python -m compileall src/ -b && \
    find . -name "*.pyc" -delete

# Create app user for security
RUN useradd --create-home --shell /bin/bash app && \
    chown -R app:app /app

# Switch to app user
USER app

# Set environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Production startup command
CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1", "--access-log"]
