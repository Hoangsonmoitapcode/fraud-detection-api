# Complete production deployment script
# This will trigger GitHub Actions and guide Railway setup

param(
    [string]$Message = "Production deployment with pre-installed dependencies",
    [switch]$SkipBuild,
    [switch]$ForceRebuild
)

Write-Host "üöÄ Starting Production Deployment Process..." -ForegroundColor Cyan
Write-Host ""

if (-not $SkipBuild) {
    Write-Host "üì¶ Step 1: Triggering GitHub Actions Build..." -ForegroundColor Yellow
    
    # Commit changes if any
    $hasChanges = git status --porcelain
    if ($hasChanges) {
        Write-Host "üìù Committing pending changes..." -ForegroundColor White
        git add .
        git commit -m "deploy: $Message"
    }
    
    # Create deployment commit
    git commit --allow-empty -m "build: $Message"
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Deployment commit created" -ForegroundColor Green
        
        Write-Host "üîÑ Pushing to trigger GitHub Actions..." -ForegroundColor Cyan
        git push origin main
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Push successful!" -ForegroundColor Green
            Write-Host ""
            Write-Host "üîó Monitor build progress:" -ForegroundColor White
            Write-Host "   https://github.com/hoangsonmoitapcode/fraud-detection-api/actions" -ForegroundColor Blue
            Write-Host ""
            Write-Host "‚è±Ô∏è  Build will take 5-8 minutes (heavy but complete image)" -ForegroundColor Yellow
            Write-Host "üì¶ Image will be available at:" -ForegroundColor White
            Write-Host "   ghcr.io/hoangsonmoitapcode/fraud-detection-api:latest" -ForegroundColor Blue
        } else {
            Write-Host "‚ùå Push failed!" -ForegroundColor Red
            exit 1
        }
    } else {
        Write-Host "‚ùå Failed to create deployment commit!" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚è≠Ô∏è  Skipping build (using existing image)" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üõ§Ô∏è  Step 2: Railway Deployment Guide" -ForegroundColor Yellow
Write-Host "============================================" -ForegroundColor Gray
Write-Host ""
Write-Host "1Ô∏è‚É£  Go to Railway Dashboard:" -ForegroundColor White
Write-Host "   https://railway.app/dashboard" -ForegroundColor Blue
Write-Host ""
Write-Host "2Ô∏è‚É£  Create New Project:" -ForegroundColor White
Write-Host "   ‚Ä¢ Click 'New Project'" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Select 'Deploy from Docker Image'" -ForegroundColor Gray
Write-Host ""
Write-Host "3Ô∏è‚É£  Configure Docker Image:" -ForegroundColor White
Write-Host "   ‚Ä¢ Image URL: ghcr.io/hoangsonmoitapcode/fraud-detection-api:latest" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Port: 8000" -ForegroundColor Gray
Write-Host ""
Write-Host "4Ô∏è‚É£  Set Environment Variables:" -ForegroundColor White
Write-Host "   ‚Ä¢ DATABASE_URL=postgresql://user:pass@host:port/db" -ForegroundColor Gray
Write-Host "   ‚Ä¢ PORT=8000" -ForegroundColor Gray
Write-Host "   ‚Ä¢ ENVIRONMENT=production" -ForegroundColor Gray
Write-Host ""
Write-Host "5Ô∏è‚É£  Deploy!" -ForegroundColor White
Write-Host "   ‚Ä¢ Click 'Deploy'" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Deployment should complete in 30-60 seconds" -ForegroundColor Gray
Write-Host ""
Write-Host "‚ú® Benefits of this approach:" -ForegroundColor Green
Write-Host "   ‚úÖ All dependencies pre-installed" -ForegroundColor Gray
Write-Host "   ‚úÖ ML models pre-cached" -ForegroundColor Gray
Write-Host "   ‚úÖ Ultra-fast Railway deployments (30s)" -ForegroundColor Gray
Write-Host "   ‚úÖ No build timeouts" -ForegroundColor Gray
Write-Host "   ‚úÖ Consistent production environment" -ForegroundColor Gray
Write-Host ""

if (-not $SkipBuild) {
    Write-Host "‚è≥ Waiting for GitHub Actions to complete..." -ForegroundColor Yellow
    Write-Host "   Once build is done, follow the Railway setup steps above!" -ForegroundColor White
}
